[
  // Custom layout
  { "keys": ["super+shift+7"],
    "caption": "2 cols (full - 2)",
    "command": "set_layout",
    "args": {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 0.5, 1.0],
      "cells": [ [0, 0, 1, 2], [1, 0, 2, 1], [1, 1, 2, 2] ]
    }
  },
  { "keys": ["super+shift+8"],
    "caption": "2 cols (full - 2)",
    "command": "set_layout",
    "args": {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 0.5, 1.0],
      "cells": [ [0, 0, 1, 1], [1, 0, 2, 1], [0, 1, 2, 2] ]
    }
  },
  { "keys": ["super+shift+9"],
    "caption": "2 cols",
    "command": "set_layout",
    "args": {
      "cols": [0.0, 0.5, 1.0],
      "rows": [0.0, 1.0],
      "cells": [ [0, 0, 1, 1], [1, 0, 2, 1] ]
    }
  },
  { "keys": ["super+shift+0"],
    "caption": "3 cols",
    "command": "set_layout",
    "args": {
      "cols": [0.0, 0.33, 0.66, 1.0],
      "rows": [0.0, 1.0],
      "cells": [ [0, 0, 1, 1], [1, 0, 2, 1], [1, 0, 3, 1] ]
    }
  },

  // Fold Comments
  // https://github.com/hasclass/FoldComments.git
  { "keys": ["super+shift+/"], "command": "toggle_comments" },

  // Single test
  { "keys": ["super+shift+r"], "command": "run_single_ruby_test" },

  // Emmet
  {
    "keys": ["ctrl+alt+space"],
    "command": "expand_as_you_type",
    "context": [{
      "operand": false,
      "operator": "equal",
      "match_all": true,
      "key": "setting.is_widget"
    }, {
      "match_all": true,
      "key": "emmet_action_enabled.expand_as_you_type"
    }]
  },
  {
    "keys": ["ctrl+alt+w"],
    "command": "wrap_as_you_type",
    "context": [{
      "operand": false,
      "operator": "equal",
      "match_all": true,
      "key": "setting.is_widget"
    }, {
      "match_all": true,
      "key": "emmet_action_enabled.wrap_as_you_type"
    }]
  },
  {
    "keys": ["ctrl+e"],
    "args": {"action": "expand_abbreviation"},
    "command": "run_emmet_action",
    "context": [{"key": "emmet_action_enabled.expand_abbreviation"}]
  },

  // JsFormat for JavaScript and JSON
  { "keys": ["ctrl+super+f"], "command": "js_format" },

  // Reveal file in sidebar
  { "keys": ["ctrl+super+r"], "command": "reveal_in_side_bar" },

  // New Lines
  { "keys": ["ctrl+super+enter"], "command": "run_macro_file", "args": {"file": "Packages/User/Add Line with Semi Colon.sublime-macro"} },
  { "keys": ["alt+super+enter"], "command": "run_macro_file", "args": {"file": "Packages/User/Add Line with Comma.sublime-macro"} },
  { "keys": ["alt+enter"], "command": "run_macro_file", "args": {"file": "Packages/User/Add Line with Dot.sublime-macro"} },
  { "keys": ["ctrl+enter"], "command": "run_macro_file", "args": {"file": "Packages/User/Add Semi Colon.sublime-macro"} },

  // Cucumber Steps
  { "keys": ["super+y"], "command": "cucumber_step_finder" },
  { "keys": ["ctrl+super+m"], "command": "match_step" },

  // Sublime List Tabs
  { "keys": ["ctrl+super+t"], "command": "list_tabs"},

  // Move File to Other Tab
  { "keys": ["ctrl+shift+left"], "command": "move_to_group", "args": { "group": 0 } },
  { "keys": ["ctrl+shift+right"], "command": "move_to_group", "args": { "group": 1 } },

  // Move Tabs
  { "keys": ["ctrl+shift+["], "command": "move_view", "args": {"direction": "left"} },
  { "keys": ["ctrl+shift+]"], "command": "move_view", "args": {"direction": "right"} },

  // Underscore
  { "keys": ["super+shift+."], "command": "insert_snippet", "args": {"contents": "<%= $0 %>"}},
  { "keys": ["ctrl+."], "command": "insert_snippet", "args": {"contents": "<% $0 %>"}},

  // Expand Selection to Quotes
  { "keys": ["super+shift+'"], "command": "expand_selection_to_quotes" },

  // MoveText
  { "keys": ["alt+super+left"], "command": "move_text_left" },
  { "keys": ["alt+super+right"], "command": "move_text_right" },
  { "keys": ["alt+super+up"], "command": "move_text_up" },
  { "keys": ["alt+super+down"], "command": "move_text_down" },

  // Abacus Alignment
  { "keys": ["super+ctrl+a"], "command": "abacus" },

  // Pretty JSON
  { "keys": ["super+ctrl+j"], "command": "prettyjson" },

  // Custom
  { "keys": ["ctrl+shift+."], "command": "erb" },

  // Autocomplete
  { "keys": ["alt+space"], "command": "auto_complete" },
  { "keys": ["alt+space"], "command": "replace_completion_with_auto_complete", "context":
    [
      { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
      { "key": "setting.tab_completion", "operator": "equal", "operand": true }
    ]
  },

  // Ruby string interpolation
  { "keys": ["#"], "command": "insert_snippet", "args": {"contents": "#{${0:$SELECTION}}"}, "context":
    [
      { "key": "selector", "operator": "equal", "operand": "(string.quoted.double.ruby|string.interpolated.ruby) - string source", "match_all": true }
    ]
  },

  // Auto-pair single quotes
  { "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'$0'"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true }
    ]
  },

  // Trim Trailing Whitespace
  { "keys": ["shift+ctrl+t"], "command": "trim_trailing_whitespace" },

  // CTags
  {
    "command": "navigate_to_definition",
    "context": [],
    "keys": [
      "super+t", "super+t"
    ]
  },
  {
    "command": "navigate_to_definition",
    "keys": [
      "super+alt+]"
    ]
  },
  {
    "command": "jump_back",
    "context": [],
    "keys": [
      "super+t", "super+b"
    ]
  },
  {
    "command": "jump_back",
    "keys": [
      "super+alt+["
    ]
  },
  {
    "command": "jump_back",
    "args": {
      "to": "last_modification"
    },
    "context": [],
    "keys": [
      "super+t", "super+m"
    ]
  },
  {
    "command": "rebuild_tags",
    "context": [],
    "keys": [
      "super+t", "super+r"
    ]
  },
  {
    "command": "show_symbols",
    "context": [
      {
        "key": "selector",
        "match_all": true,
        "operand": "source -source.css",
        "operator": "equal"
      }
    ],
    "keys": [
      "alt+s"
    ]
  },
  {
    "command": "show_symbols",
    "args": {
      "type": "multi"
    },
    "context": [
      {
        "key": "selector",
        "match_all": true,
        "operand": "source -source.css",
        "operator": "equal"
      }
    ],
    "keys": [
      "alt+shift+s"
    ]
  },
  {
    "command": "toggle_minimap",
    "keys": ["super+k","super+m"]
  }
]
